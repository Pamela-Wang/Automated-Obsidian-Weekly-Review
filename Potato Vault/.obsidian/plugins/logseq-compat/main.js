'use strict';

var obsidian = require('obsidian');

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
    return extendStatics(d, b);
};

function __extends(d, b) {
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var TaskType;
(function (TaskType) {
    TaskType["TODO"] = "TODO";
    TaskType["DONE"] = "DONE";
    TaskType["DOING"] = "DOING";
    TaskType["LATER"] = "LATER";
    TaskType["CANCELED"] = "CANCELED";
    TaskType["UNKNOWN"] = "UNKNOWN";
})(TaskType || (TaskType = {}));
var TaskCSSClass;
(function (TaskCSSClass) {
    TaskCSSClass["COMPLETE"] = "logseq-complete-task";
    TaskCSSClass["INCOMPLETE"] = "logseq-incomplete-task";
    TaskCSSClass["KEYWORD"] = "logseq-keyword";
})(TaskCSSClass || (TaskCSSClass = {}));
var VERSION = "0.0.4";
var LogSeqRegExes = /** @class */ (function () {
    function LogSeqRegExes() {
    }
    LogSeqRegExes.parseTaskType = function (content) {
        if (content.startsWith("DONE ")) {
            return TaskType.DONE;
        }
        else if (content.startsWith("TODO ")) {
            return TaskType.TODO;
        }
        else if (content.startsWith("DOING ")) {
            return TaskType.DOING;
        }
        else if (content.startsWith("LATER ")) {
            return TaskType.LATER;
        }
        else if (content.startsWith("CANCELED ")) {
            return TaskType.CANCELED;
        }
        else {
            return TaskType.UNKNOWN;
        }
    };
    LogSeqRegExes.isBlock = function (content) {
        return LogSeqRegExes.BEGIN_BLOCK_REGEX.test(content);
    };
    LogSeqRegExes.HEADING_REGEX = {
        h1: /(?:\s+)?- # (?:.*)$/gms,
        h2: /(?:\s+)?- ## (?:.*)$/gms,
        h3: /(?:\s+)?- ### (?:.*)$/gms,
        h4: /(?:\s+)?- #### (?:.*)$/gms,
        h5: /(?:\s+)?- ##### (?:.*)$/gms,
    };
    LogSeqRegExes.BEGIN_BLOCK_REGEX = new RegExp(/\#\+BEGIN_(WARNING|IMPORTANT|QUOTE|CAUTION)/gms);
    LogSeqRegExes.END_BLOCK_REGEX = new RegExp(/\#\+END_(WARNING|IMPORTANT|QUOTE|CAUTION)/gms);
    return LogSeqRegExes;
}());
var CodeMirrorOverlays = /** @class */ (function () {
    function CodeMirrorOverlays() {
    }
    CodeMirrorOverlays.cmAddHeadingOverlay = function (cm) {
        cm.addOverlay(CodeMirrorOverlays.headingsOverlay);
    };
    CodeMirrorOverlays.cmRemoveHeadingOverlay = function (cm) {
        cm.removeOverlay(CodeMirrorOverlays.headingsOverlay);
    };
    CodeMirrorOverlays.headingsOverlay = {
        token: function (stream) {
            if (stream.match(LogSeqRegExes.HEADING_REGEX["h1"])) {
                return "header-1";
            }
            else if (stream.match(LogSeqRegExes.HEADING_REGEX["h2"])) {
                return "header-2";
            }
            else if (stream.match(LogSeqRegExes.HEADING_REGEX["h3"])) {
                return "header-3";
            }
            else if (stream.match(LogSeqRegExes.HEADING_REGEX["h4"])) {
                return "header-4";
            }
            else if (stream.match(LogSeqRegExes.HEADING_REGEX["h5"])) {
                return "header-5";
            }
            else {
                stream.next();
            }
        },
    };
    return CodeMirrorOverlays;
}());
function createKeywordElement(keyword) {
    var element = document.createElement("span");
    element.classList.add(TaskCSSClass.KEYWORD);
    element.textContent = keyword;
    return element;
}
function createCheckboxElement(checked) {
    if (checked === void 0) { checked = false; }
    var element = document.createElement("input");
    element.type = "checkbox";
    element.checked = checked;
    return element;
}
var LogSeqPlugin = /** @class */ (function (_super) {
    __extends(LogSeqPlugin, _super);
    function LogSeqPlugin() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    LogSeqPlugin.removeProperties = function (content) {
        return content
            .replace(/doing:: (?:\d{13})/, "")
            .replace(/done:: (?:\d{13})/, "")
            .replace(/todo:: (?:\d{13})/, "")
            .replace(/doing:: (?:\d{13})/, "")
            .replace(/later:: (?:\d{13})/, "")
            .replace(/canceled:: (?:\d{13})/, "")
            .replace(/id:: (?:[0-9A-F]{8}-[0-9A-F]{4}-4[0-9A-F]{3}-[89AB][0-9A-F]{3}-[0-9A-F]{12})/i, "")
            .replace(/collapsed:: (?:true|false)/gms, "");
    };
    LogSeqPlugin.processChildren = function (el, keyword) {
        el.childNodes.forEach(function (child) {
            if (child.nodeType == Node.TEXT_NODE) {
                if (child.nodeValue.startsWith(keyword)) {
                    child.nodeValue = child.nodeValue.replace(keyword, "");
                }
                child.nodeValue = LogSeqPlugin.removeProperties(child.nodeValue);
            }
        });
    };
    LogSeqPlugin.styleNode = function (el, classname) {
        el.querySelectorAll("li[data-line]").forEach(function (child) {
            // Do not "complete" the child tasks, since this is LogSeq's behaviour
            child.classList.add(TaskCSSClass.INCOMPLETE);
        });
        el.classList.add(classname);
    };
    LogSeqPlugin.prototype.onload = function () {
        console.log("Loading logseq-compat plugin " + VERSION);
        this.registerMarkdownPostProcessor(LogSeqPlugin.postprocessor);
        // Style headings in source editing
        this.registerCodeMirror(CodeMirrorOverlays.cmAddHeadingOverlay);
    };
    LogSeqPlugin.prototype.onunload = function () {
        console.log("unloading logseq-compat plugin " + VERSION);
        this.registerCodeMirror(CodeMirrorOverlays.cmRemoveHeadingOverlay);
    };
    LogSeqPlugin.postprocessor = function (el, ctx) {
        var entries = el.querySelectorAll("li[data-line]");
        entries.forEach(function (entry) {
            // Check if the entry is a org-mode block
            if (LogSeqRegExes.isBlock(entry.innerHTML)) {
                var replacedBlock = entry.innerHTML.replace(LogSeqRegExes.BEGIN_BLOCK_REGEX, "<blockquote> &#9759;");
                replacedBlock = replacedBlock.replace(LogSeqRegExes.END_BLOCK_REGEX, "</blockquote>");
                entry.innerHTML = replacedBlock;
            }
            var taskType = LogSeqRegExes.parseTaskType(entry.textContent);
            if (taskType == TaskType.DONE) {
                LogSeqPlugin.processChildren(entry, TaskType.DONE);
                entry.insertAdjacentElement("afterbegin", createCheckboxElement(true));
                LogSeqPlugin.styleNode(entry, TaskCSSClass.COMPLETE);
            }
            else if (taskType == TaskType.TODO) {
                LogSeqPlugin.processChildren(entry, TaskType.TODO);
                entry.insertAdjacentElement("afterbegin", createKeywordElement(TaskType.TODO));
                entry.insertAdjacentElement("afterbegin", createCheckboxElement());
                LogSeqPlugin.styleNode(entry, TaskCSSClass.INCOMPLETE);
            }
            else if (taskType == TaskType.DOING) {
                LogSeqPlugin.processChildren(entry, TaskType.DOING);
                entry.insertAdjacentElement("afterbegin", createKeywordElement(TaskType.DOING));
                entry.insertAdjacentElement("afterbegin", createCheckboxElement());
            }
            else if (taskType == TaskType.LATER) {
                LogSeqPlugin.processChildren(entry, TaskType.LATER);
                entry.insertAdjacentElement("afterbegin", createKeywordElement(TaskType.LATER));
                entry.insertAdjacentElement("afterbegin", createCheckboxElement());
                LogSeqPlugin.styleNode(entry, TaskCSSClass.INCOMPLETE);
            }
            else if (taskType == TaskType.CANCELED) {
                LogSeqPlugin.processChildren(entry, TaskType.CANCELED);
                LogSeqPlugin.styleNode(entry, TaskCSSClass.COMPLETE);
            }
        });
    };
    return LogSeqPlugin;
}(obsidian.Plugin));

module.exports = LogSeqPlugin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
