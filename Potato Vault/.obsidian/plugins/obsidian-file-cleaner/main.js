/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// src/main.ts
__export(exports, {
  default: () => FileCleanerPlugin
});
var import_obsidian3 = __toModule(require("obsidian"));

// src/settings.ts
var import_obsidian2 = __toModule(require("obsidian"));

// src/translations/helper.ts
var import_obsidian = __toModule(require("obsidian"));

// src/translations/locale/en.ts
var en_default = {
  cleanedFilesName: "Cleaned files",
  cleanedFilesDesc: "What do you want to do with cleaned files?",
  systemTrashOption: "Move to system trash",
  obsidianTrashOption: "Move to Obsidian trash (.trash folder)",
  deleteOption: "Permanently delete",
  doCleanNotice: "Clean successful",
  doNotCleanNotice: "No file to clean"
};

// src/translations/locale/zh-cn.ts
var zh_cn_default = {
  cleanedFilesName: "\u6E05\u7406\u6587\u4EF6",
  cleanedFilesDesc: "\u8981\u5982\u4F55\u5904\u7406\u5DF2\u6E05\u7406\u7684\u6587\u4EF6\uFF1F",
  deleteOption: "\u6C38\u4E45\u5220\u9664",
  systemTrashOption: "\u79FB\u81F3\u7CFB\u7EDF\u56DE\u6536\u7AD9",
  obsidianTrashOption: "\u79FB\u81F3\u8F6F\u4EF6\u56DE\u6536\u7AD9\uFF08.trash \u6587\u4EF6\u5939\uFF09",
  doCleanNotice: "\u6E05\u7406\u6210\u529F",
  doNotCleanNotice: "\u6CA1\u6709\u6587\u4EF6\u9700\u8981\u6E05\u7406"
};

// src/translations/helper.ts
var localeMap = {
  en: en_default,
  "zh-cn": zh_cn_default
};
var locale = localeMap[import_obsidian.moment.locale()];
function t(str) {
  return locale && locale[str] || en_default[str];
}

// src/settings.ts
var DEFAULT_SETTINGS = {
  destination: "system"
};
var FileCleanerSettingTab = class extends import_obsidian2.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    this.containerEl.empty();
    new import_obsidian2.Setting(containerEl).setName(t("cleanedFilesName")).setDesc(t("cleanedFilesDesc")).addDropdown((dropdown) => dropdown.addOption("system", t("systemTrashOption")).addOption("obsidian", t("obsidianTrashOption")).addOption("permanent", t("deleteOption")).setValue(this.plugin.settings.destination).onChange((value) => {
      this.plugin.settings.destination = value;
      this.plugin.saveSettings();
    }));
  }
};

// src/util.ts
var getEmptyMdFiles = (app) => {
  let mdFiles = app.vault.getMarkdownFiles();
  let emptyMdFiles = [];
  for (let file of mdFiles) {
    if (file.stat.size === 0) {
      emptyMdFiles.push(file);
    }
  }
  return emptyMdFiles;
};
var getUnusedAttachments = (app) => {
  let files = app.vault.getFiles();
  const attachmentRegex = /(.jpg|.jpeg|.png|.gif|.svg|.pdf)$/i;
  let attachments = [];
  for (let file of files) {
    if (file.name.match(attachmentRegex)) {
      attachments.push(file);
    }
  }
  let usedAttachments = [];
  let resolvedLinks = app.metadataCache.resolvedLinks;
  if (resolvedLinks) {
    for (const [mdFile, links] of Object.entries(resolvedLinks)) {
      for (const [path, times] of Object.entries(resolvedLinks[mdFile])) {
        let attachmentMatch = path.match(attachmentRegex);
        if (attachmentMatch) {
          let file = app.vault.getAbstractFileByPath(path);
          usedAttachments.push(file);
        }
      }
    }
  }
  let unusedAttachments = attachments.filter((file) => !usedAttachments.includes(file));
  return unusedAttachments;
};

// src/main.ts
var FileCleanerPlugin = class extends import_obsidian3.Plugin {
  onload() {
    return __async(this, null, function* () {
      yield this.loadSettings();
      this.addRibbonIcon("trash", "File Cleaner", () => __async(this, null, function* () {
        let emptyMdFiles = getEmptyMdFiles(this.app);
        let unusedAttachments = getUnusedAttachments(this.app);
        let cleanFiles = [...emptyMdFiles, ...unusedAttachments];
        let len = cleanFiles.length;
        if (len > 0) {
          let destination = this.settings.destination;
          for (let file of cleanFiles) {
            console.log(file.name + " cleaned");
            if (destination === "permanent") {
              yield this.app.vault.delete(file);
            } else if (destination === "system") {
              yield this.app.vault.trash(file, true);
            } else if (destination === "obsidian") {
              yield this.app.vault.trash(file, false);
            }
          }
          new import_obsidian3.Notice(t("doCleanNotice"));
        } else {
          new import_obsidian3.Notice(t("doNotCleanNotice"));
        }
      }));
      this.addSettingTab(new FileCleanerSettingTab(this.app, this));
    });
  }
  onunload() {
  }
  loadSettings() {
    return __async(this, null, function* () {
      this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
    });
  }
  saveSettings() {
    return __async(this, null, function* () {
      yield this.saveData(this.settings);
    });
  }
};
//# sourceMappingURL=data:application/json;base64,
